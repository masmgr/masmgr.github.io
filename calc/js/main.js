/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Calculator.ts":
/*!***************************!*\
  !*** ./src/Calculator.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"calcButtonToMethods\": () => (/* binding */ calcButtonToMethods),\n/* harmony export */   \"Calculator\": () => (/* binding */ Calculator)\n/* harmony export */ });\n/* harmony import */ var _Util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Util */ \"./src/Util.ts\");\n/* harmony import */ var _Display__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Display */ \"./src/Display.ts\");\n/* harmony import */ var _Memory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Memory */ \"./src/Memory.ts\");\n/* harmony import */ var _ErrorLib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ErrorLib */ \"./src/ErrorLib.ts\");\n\r\n\r\n\r\n\r\nvar calcButtonToMethods = [\r\n    \"btnBack\",\r\n    \"btnClearEnter\",\r\n    \"btnClear\",\r\n    \"btnNumber1\",\r\n    \"btnNumber2\",\r\n    \"btnNumber3\",\r\n    \"btnNumber4\",\r\n    \"btnNumber5\",\r\n    \"btnNumber6\",\r\n    \"btnNumber7\",\r\n    \"btnNumber8\",\r\n    \"btnNumber9\",\r\n    \"btnNumber0\",\r\n    \"btnNegate\",\r\n    \"btnPoint\",\r\n    \"btnAddition\",\r\n    \"btnSubtraction\",\r\n    \"btnMultiply\",\r\n    \"btnDivision\",\r\n    \"btnEvaluation\",\r\n    \"btnSquareRoot\",\r\n    \"btnPercentage\",\r\n    \"btnReciprocal\",\r\n    \"btnMemoryClear\",\r\n    \"btnMemoryRead\",\r\n    \"btnMemoryStore\",\r\n    \"btnMemoryAdd\",\r\n];\r\nvar StatusTypes = {\r\n    /**\r\n     * 演算子エラー\r\n     */\r\n    OPERATION_ERROR: -1,\r\n    /**\r\n     * 演算対象1入力待ち\r\n     */\r\n    OPERAND1_ENTRY: 1,\r\n    /**\r\n     * 演算対象1入力中 → 演算対象1入力待ち\r\n     */\r\n    OPERAND1_INPUT: 2,\r\n    /**\r\n     * 演算対象2入力待ち\r\n     */\r\n    OPERAND2_ENTRY: 3,\r\n    /**\r\n     * 演算対象2入力中 → 演算対象2入力待ち\r\n     */\r\n    OPERAND2_INPUT: 4,\r\n};\r\nvar Calculator = /** @class */ (function () {\r\n    function Calculator(param) {\r\n        this.MainDisplay = param.MainDisplay;\r\n        this.MemoryDisplay = param.MemoryDisplay;\r\n        this.fractionDigits = param.fractionDigits || 8;\r\n        this.MainDisplay.value = \"0.\";\r\n        this.MemoryDisplay.value = \"\";\r\n        this.status = StatusTypes.OPERAND1_ENTRY;\r\n        this.operand1 = 0;\r\n        this.operand2 = 0;\r\n        this.operator = \"\";\r\n        this.display = new _Display__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\r\n        this.memory = new _Memory__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\r\n        this.maxLength = this.MainDisplay.maxLength || 16;\r\n    }\r\n    /**\r\n     *\r\n     * @param value\r\n     * @returns\r\n     */\r\n    Calculator.prototype.inputKey = function (key, value) {\r\n        switch (key) {\r\n            case \"btnBack\":\r\n                this.back();\r\n                break;\r\n            case \"btnClearEnter\":\r\n                this.clearEnter();\r\n                break;\r\n            case \"btnClear\":\r\n                this.clear();\r\n                break;\r\n            case \"btnNumber1\":\r\n            case \"btnNumber2\":\r\n            case \"btnNumber3\":\r\n            case \"btnNumber4\":\r\n            case \"btnNumber5\":\r\n            case \"btnNumber6\":\r\n            case \"btnNumber7\":\r\n            case \"btnNumber8\":\r\n            case \"btnNumber9\":\r\n            case \"btnNumber0\":\r\n                this.inputNumber(value);\r\n                break;\r\n            case \"btnNegate\":\r\n                this.negate();\r\n                break;\r\n            case \"btnPoint\":\r\n                this.inputPoint();\r\n                break;\r\n            case \"btnAddition\":\r\n            case \"btnSubtraction\":\r\n            case \"btnMultiply\":\r\n            case \"btnDivision\":\r\n                this.inputOperator(value);\r\n                break;\r\n            case \"btnEvaluation\":\r\n                this.evaluate();\r\n                break;\r\n            case \"btnSquareRoot\":\r\n                this.inputSquareRoot();\r\n                break;\r\n            case \"btnPercentage\":\r\n                this.inputPercentage();\r\n                break;\r\n            case \"btnReciprocal\":\r\n                this.inputReciprocal();\r\n                break;\r\n            case \"btnMemoryClear\":\r\n                this.clearMemory();\r\n                break;\r\n            case \"btnMemoryRead\":\r\n                this.readMemory();\r\n                break;\r\n            case \"btnMemoryStore\":\r\n                this.storeMemory();\r\n                break;\r\n            case \"btnMemoryAdd\":\r\n                this.addMemory();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n    /**\r\n     * エラー表示\r\n     */\r\n    Calculator.prototype.operationErrorHandler = function (value) {\r\n        if (isFinite(value)) {\r\n            return false;\r\n        }\r\n        var msg = \"\";\r\n        if (isNaN(value) &&\r\n            this.operator == \"/\" &&\r\n            this.operand1 == 0 &&\r\n            this.operand2 == 0) {\r\n            // * 非数(虚数以外)\r\n            msg = \"関数の結果が定義されていません。\";\r\n        }\r\n        else if (isNaN(value)) {\r\n            // * 非数(虚数)\r\n            msg = \"無効な値です。\";\r\n        }\r\n        else if (this.operand2 == 0) {\r\n            // * 無限大(ゼロ除算、ゼロ逆数)\r\n            msg = \"0 で割ることはできません。\";\r\n        }\r\n        else {\r\n            // * 無限大(ゼロ除算、ゼロ逆数以外)\r\n            msg = \"オーバーフローしました。\";\r\n        }\r\n        this.clear();\r\n        this.display.set(msg);\r\n        this.status = StatusTypes.OPERATION_ERROR;\r\n        return true;\r\n    };\r\n    /**\r\n     * 表示値の取得\r\n     */\r\n    Calculator.prototype.getDisplay = function () {\r\n        return this.display.get();\r\n    };\r\n    /**\r\n     * 表示値の設定\r\n     */\r\n    Calculator.prototype.setDisplay = function (value) {\r\n        if (typeof value === \"number\") {\r\n            this.display.set(value.toString());\r\n        }\r\n        else {\r\n            this.display.set(value);\r\n        }\r\n        this.MainDisplay.value = this.display.get();\r\n    };\r\n    /*\r\n     * メモリ値の取得\r\n     */\r\n    Calculator.prototype.getMemory = function () {\r\n        return this.memory.get();\r\n    };\r\n    /**\r\n     * メモリ値の設定\r\n     */\r\n    Calculator.prototype.setMemory = function (value) {\r\n        if (typeof value === \"number\") {\r\n            this.memory.set(value.toString());\r\n        }\r\n        else {\r\n            this.memory.set(value);\r\n        }\r\n        this.MemoryDisplay.value = this.memory.getMemoryDisplay();\r\n    };\r\n    /**\r\n     * [C]\r\n     */\r\n    Calculator.prototype.clear = function () {\r\n        // * メモリ値は除く\r\n        this.setDisplay(\"0\");\r\n        this.status = StatusTypes.OPERAND1_ENTRY;\r\n        this.operand1 = 0;\r\n        this.operand2 = 0;\r\n        this.operator = \"\";\r\n        return true;\r\n    };\r\n    /**\r\n     * [CE]\r\n     */\r\n    Calculator.prototype.clearEnter = function () {\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中\r\n                this.setDisplay(\"0\");\r\n                break;\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示 → 演算対象1入力待ち\r\n                this.clear();\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [Back]\r\n     *\r\n     * 【負符号や小数点があるとき】\r\n     * ■ -1.5 [Back]\t\t\t\t\t\t\t\t→ -1.\r\n     * ■ -1.5 [Back] [2]\t\t\t\t\t\t\t→ -1.2\r\n     * ■ -1.5 [Back] [Back]\t\t\t\t\t\t→ -1\r\n     * ■ -1.5 [Back] [Back] [2]\t\t\t\t\t→ -12\r\n     * ■ -1.5 [Back] [Back] [Back]\t\t\t\t\t→ 0\r\n     * ■ -1.5 [Back] [Back] [Back] [2]\t\t\t\t→ 2\r\n     *\r\n     * 【負符号と小数点があり、かつ先頭が 0 のとき】\r\n     * ■ -0.5 [Back] [Back]\t\t\t\t\t\t→ 0\r\n     * ■ -0.5 [Back] [Back] [2]\t\t\t\t\t→ 2\r\n     *\r\n     * 【入力中以外は無効】\r\n     * ■ 0.0003 [*] 0.0007 [=] [Back] [Back] ..\t→ 2.1e-7 以降無反応\r\n     */\r\n    Calculator.prototype.back = function () {\r\n        var value;\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中\r\n                value = this.getDisplay();\r\n                if (/^-?.$/.test(value)) {\r\n                    value = \"0\";\r\n                }\r\n                else if (value == \"-0.\") {\r\n                    value = \"0\";\r\n                }\r\n                else {\r\n                    value = value.slice(0, -1);\r\n                }\r\n                this.setDisplay(value);\r\n                break;\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [0] .. [9] 数値\r\n     */\r\n    Calculator.prototype.inputNumber = function (str) {\r\n        var n = parseInt(str);\r\n        var value;\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち → 演算対象1入力中\r\n                this.setDisplay(n);\r\n                this.status = StatusTypes.OPERAND1_INPUT;\r\n                break;\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち → 演算対象2入力中\r\n                this.setDisplay(n);\r\n                this.status = StatusTypes.OPERAND2_INPUT;\r\n                break;\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中\r\n                value = this.getDisplay();\r\n                value = value.replace(/^0+$/, \"\");\r\n                if (value.length < this.maxLength) {\r\n                    this.setDisplay(value + n);\r\n                }\r\n                break;\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [.] 小数点\r\n     */\r\n    Calculator.prototype.inputPoint = function () {\r\n        var value;\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち → 演算対象1入力中\r\n                this.setDisplay(\"0.\");\r\n                this.status = StatusTypes.OPERAND1_INPUT;\r\n                break;\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち → 演算対象2入力中\r\n                this.setDisplay(\"0.\");\r\n                this.status = StatusTypes.OPERAND2_INPUT;\r\n                break;\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中\r\n                value = this.getDisplay();\r\n                if (value.indexOf(\".\") < 0) {\r\n                    this.setDisplay(value + \".\");\r\n                }\r\n                break;\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [+/-] 符号反転\r\n     */\r\n    Calculator.prototype.negate = function () {\r\n        var value;\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中\r\n                value = this.getDisplay();\r\n                if (value != \"0\") {\r\n                    if (value.charAt(0) != \"-\") {\r\n                        value = \"-\" + value;\r\n                    }\r\n                    else {\r\n                        value = value.substring(1);\r\n                    }\r\n                    this.setDisplay(value);\r\n                }\r\n                break;\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち → 未定義\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [+] [-] [*] [/] 四則演算子\r\n     */\r\n    Calculator.prototype.inputOperator = function (ope) {\r\n        var value;\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\t\t→ 演算対象2入力待ち\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中\t\t→ 演算対象2入力待ち\r\n                value = parseFloat(this.getDisplay());\r\n                if (this.operationErrorHandler(value)) {\r\n                    return false;\r\n                }\r\n                value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                this.setDisplay(value);\r\n                this.operand1 = value;\r\n                this.operator = ope;\r\n                this.status = StatusTypes.OPERAND2_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち\r\n                this.operator = ope;\r\n                break;\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中 → 演算対象2入力待ち\r\n                if (!this.evaluate()) {\r\n                    return false;\r\n                }\r\n                value = parseFloat(this.getDisplay());\r\n                if (this.operationErrorHandler(value)) {\r\n                    return false;\r\n                }\r\n                value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                this.setDisplay(value);\r\n                this.operand1 = value;\r\n                this.operator = ope;\r\n                this.status = StatusTypes.OPERAND2_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [=] 四則演算実行\r\n     */\r\n    Calculator.prototype.evaluate = function () {\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中 → 演算対象1入力待ち\r\n                if (this.operator) {\r\n                    this.operand1 = parseFloat(this.getDisplay());\r\n                    var value = eval(this.operand1 +\r\n                        \" \" +\r\n                        this.operator +\r\n                        \" \" +\r\n                        this.operand2);\r\n                    if (this.operationErrorHandler(value)) {\r\n                        return false;\r\n                    } // ゼロ除算\r\n                    value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                    this.setDisplay(value);\r\n                    this.status = StatusTypes.OPERAND1_ENTRY;\r\n                }\r\n                break;\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち\t\t→ 演算対象1入力待ち\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中\t\t→ 演算対象1入力待ち\r\n                if (this.operator) {\r\n                    this.operand2 = parseFloat(this.getDisplay());\r\n                    var value = eval(this.operand1 +\r\n                        \" \" +\r\n                        this.operator +\r\n                        \" \" +\r\n                        this.operand2);\r\n                    if (this.operationErrorHandler(value)) {\r\n                        return false;\r\n                    } // ゼロ除算\r\n                    value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                    this.setDisplay(value);\r\n                    this.status = StatusTypes.OPERAND1_ENTRY;\r\n                }\r\n                break;\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [sqrt] 平方根\r\n     */\r\n    Calculator.prototype.inputSquareRoot = function () {\r\n        var value;\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中\t\t→ 演算対象1入力待ち\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち\t\t→ 演算対象1入力待ち\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中\t\t→ 演算対象1入力待ち\r\n                value = parseFloat(this.getDisplay());\r\n                value = Math.sqrt(value);\r\n                if (this.operationErrorHandler(value)) {\r\n                    return false;\r\n                } // 虚数\r\n                value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                this.setDisplay(value);\r\n                this.operand1 = value;\r\n                this.status = StatusTypes.OPERAND1_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [1/x] 逆数\r\n     */\r\n    Calculator.prototype.inputReciprocal = function () {\r\n        var value;\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中\t\t→ 演算対象1入力待ち\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち\t\t→ 演算対象1入力待ち\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中\t\t→ 演算対象1入力待ち\r\n                value = parseFloat(this.getDisplay());\r\n                value = 1 / value;\r\n                if (this.operationErrorHandler(value)) {\r\n                    return false;\r\n                } // ゼロ除算\r\n                value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                this.setDisplay(value);\r\n                this.operand1 = value;\r\n                this.status = StatusTypes.OPERAND1_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [%] 百分率 (Ver.1)\r\n     *\r\n     * 【[%]押下後に途中結果を表示、[=]押下後に最終結果を表示】\r\n     * ■ x [+] y [%] [=] → x + (x * (y / 100))\r\n     * ■ x [-] y [%] [=] → x - (x * (y / 100))\r\n     * ■ x [*] y [%] [=] → x * (x * (y / 100))\r\n     * ■ x [/] y [%] [=] → x / (x * (y / 100))\r\n     *\r\n     * 【[=]連続押下時、初回のみ[%]が考慮される】\r\n     * ■ x [*] y [%] [=] [=] [=] .. → x * (y / 100) * y * y ..\r\n     * ■ x [*] [%] [=] [=] [=] .. → x * (x / 100) * x * x ..\r\n     * ■ x [*] [%] [%] [%] .. → x * ((((x / 100) * (x / 100)) * (x / 100)) .. )\r\n     */\r\n    Calculator.prototype.inputPercentage = function () {\r\n        var value;\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中 → 演算対象1入力待ち\r\n                value = parseFloat(this.getDisplay());\r\n                value = (this.operand1 * value) / 100;\r\n                if (this.operationErrorHandler(value)) {\r\n                    return false;\r\n                }\r\n                value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                this.setDisplay(value);\r\n                this.status = StatusTypes.OPERAND1_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中 → 演算対象2入力待ち\r\n                value = parseFloat(this.getDisplay());\r\n                value = (this.operand1 * value) / 100;\r\n                if (this.operationErrorHandler(value)) {\r\n                    return false;\r\n                }\r\n                value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                this.setDisplay(value);\r\n                this.status = StatusTypes.OPERAND2_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [%] 百分率 (Ver.2)\r\n     *\r\n     * 【[%]押下後に最終結果を表示】\r\n     * ■ x [+] y [%] → x + (x * (y / 100))\r\n     * ■ x [-] y [%] → x - (x * (y / 100))\r\n     * ■ x [*] y [%] → x * (y / 100)\r\n     * ■ x [/] y [%] → x / (y / 100)\r\n     *\r\n     * 【[=]連続押下時、常に[%]が考慮される】\r\n     * ■ x [*] y [%] [=] [=] [=] .. → x * (y / 100) * (y / 100) * (y / 100) ..\r\n     * ■ x [*] [%] [=] [=] [=] .. → x * (x / 100) * (x / 100) * (x / 100) ..\r\n     * ■ x [*] [%] [%] [%] .. → x * (x / 100) 以降無反応\r\n     */\r\n    Calculator.prototype.inputPercentage2 = function () {\r\n        var value;\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中 → 演算対象2入力待ち\r\n                value = parseFloat(this.getDisplay());\r\n                value /= 100;\r\n                if (this.operator == \"+\" || this.operator == \"-\") {\r\n                    value *= this.operand1;\r\n                }\r\n                if (this.operationErrorHandler(value)) {\r\n                    return false;\r\n                }\r\n                value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                this.setDisplay(value);\r\n                this.status = StatusTypes.OPERAND2_ENTRY;\r\n                if (!this.evaluate()) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [MC]\r\n     */\r\n    Calculator.prototype.clearMemory = function () {\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中 → 演算対象1入力待ち\r\n                this.setMemory(0);\r\n                this.status = StatusTypes.OPERAND1_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中 → 演算対象2入力待ち\r\n                this.setMemory(0);\r\n                this.status = StatusTypes.OPERAND2_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [MR]\r\n     */\r\n    Calculator.prototype.readMemory = function () {\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中 → 演算対象1入力待ち\r\n                this.setDisplay(this.getMemory());\r\n                this.status = StatusTypes.OPERAND1_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中 → 演算対象2入力待ち\r\n                this.setDisplay(this.getMemory());\r\n                this.status = StatusTypes.OPERAND2_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [MS]\r\n     */\r\n    Calculator.prototype.storeMemory = function () {\r\n        var value;\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中 → 演算対象1入力待ち\r\n                value = parseFloat(this.getDisplay());\r\n                if (this.operationErrorHandler(value)) {\r\n                    return false;\r\n                }\r\n                value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                this.setMemory(value);\r\n                this.status = StatusTypes.OPERAND1_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中 → 演算対象2入力待ち\r\n                value = parseFloat(this.getDisplay());\r\n                if (this.operationErrorHandler(value)) {\r\n                    return false;\r\n                }\r\n                value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                this.setMemory(value);\r\n                this.status = StatusTypes.OPERAND2_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * [M+]\r\n     */\r\n    Calculator.prototype.addMemory = function () {\r\n        var value;\r\n        switch (this.status) {\r\n            case StatusTypes.OPERAND1_ENTRY: // 演算対象1入力待ち\r\n            case StatusTypes.OPERAND1_INPUT: // 演算対象1入力中 → 演算対象1入力待ち\r\n                value = this.getMemory() + parseFloat(this.getDisplay());\r\n                if (this.operationErrorHandler(value)) {\r\n                    return false;\r\n                }\r\n                value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                this.setMemory(value);\r\n                this.status = StatusTypes.OPERAND1_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERAND2_ENTRY: // 演算対象2入力待ち\r\n            case StatusTypes.OPERAND2_INPUT: // 演算対象2入力中 → 演算対象2入力待ち\r\n                value = this.getMemory() + parseFloat(this.getDisplay());\r\n                if (this.operationErrorHandler(value)) {\r\n                    return false;\r\n                }\r\n                value = _Util__WEBPACK_IMPORTED_MODULE_0__[\"default\"].cheatVariably(value, this.fractionDigits);\r\n                this.setMemory(value);\r\n                this.status = StatusTypes.OPERAND2_ENTRY;\r\n                break;\r\n            case StatusTypes.OPERATION_ERROR: // エラー表示\r\n                break;\r\n            default:\r\n                _ErrorLib__WEBPACK_IMPORTED_MODULE_3__[\"default\"].assertNever(this.status);\r\n        }\r\n        return true;\r\n    };\r\n    return Calculator;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://calculator/./src/Calculator.ts?");

/***/ }),

/***/ "./src/Display.ts":
/*!************************!*\
  !*** ./src/Display.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar Display = /** @class */ (function () {\r\n    function Display() {\r\n        this.display = \"0.\";\r\n        this.hasPoint = false;\r\n    }\r\n    Display.prototype.get = function () {\r\n        return this.hasPoint ? this.display : this.display.replace(/\\.$/, \"\");\r\n    };\r\n    Display.prototype.set = function (value) {\r\n        if (value.toString().indexOf(\".\") < 0) {\r\n            this.display = value + \".\";\r\n            this.hasPoint = false;\r\n        }\r\n        else {\r\n            this.display = value;\r\n            this.hasPoint = true;\r\n        }\r\n    };\r\n    return Display;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Display);\r\n\n\n//# sourceURL=webpack://calculator/./src/Display.ts?");

/***/ }),

/***/ "./src/ErrorLib.ts":
/*!*************************!*\
  !*** ./src/ErrorLib.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar ErrorLib = /** @class */ (function () {\r\n    function ErrorLib() {\r\n    }\r\n    ErrorLib.assertNever = function (value, message) {\r\n        throw new Error(message !== null && message !== void 0 ? message : \"Illegal value: \" + value);\r\n    };\r\n    return ErrorLib;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ErrorLib);\r\n\n\n//# sourceURL=webpack://calculator/./src/ErrorLib.ts?");

/***/ }),

/***/ "./src/Memory.ts":
/*!***********************!*\
  !*** ./src/Memory.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar Memory = /** @class */ (function () {\r\n    function Memory() {\r\n        this.memory = 0;\r\n    }\r\n    Memory.prototype.get = function () {\r\n        return this.memory;\r\n    };\r\n    Memory.prototype.set = function (value) {\r\n        this.memory = parseFloat(value) || 0;\r\n    };\r\n    Memory.prototype.getMemoryDisplay = function () {\r\n        return this.memory != 0 ? \"M\" : \"\";\r\n    };\r\n    return Memory;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Memory);\r\n\n\n//# sourceURL=webpack://calculator/./src/Memory.ts?");

/***/ }),

/***/ "./src/Util.ts":
/*!*********************!*\
  !*** ./src/Util.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar Util = /** @class */ (function () {\r\n    function Util() {\r\n    }\r\n    /*\r\n     * 小数点以下 n 桁を残して丸める\r\n     */\r\n    Util.cheat = function (f, n) {\r\n        if (!isFinite(f)) {\r\n            return f;\r\n        }\r\n        n = n || 8; // 既定値 8\r\n        var p = Math.min(Math.max(n, 0), Util.MAX_FRACTION_DIGITS);\r\n        return parseFloat(f.toFixed(p));\r\n    };\r\n    /*\r\n     * 小数点以下 n ～ 20 桁の範囲内で、3 つ以上連続する 0 または 9 を丸める\r\n     */\r\n    Util.cheatVariably = function (f, n) {\r\n        if (!isFinite(f)) {\r\n            return f;\r\n        }\r\n        n = n || 8; // 既定値 8\r\n        var str = f.toFixed(Util.MAX_FRACTION_DIGITS); // 固定小数点表記\r\n        str = str.replace(/^[^.]+\\./, \"\"); // 整数部除去\r\n        str = str.replace(/0+$/, \"\");\r\n        var re = /0{3,}|9{3,}/g;\r\n        var p = Util.MAX_FRACTION_DIGITS;\r\n        var m;\r\n        while ((m = re.exec(str)) != null) {\r\n            p = m.index; // 複数あるときは最後に一致した位置\r\n        }\r\n        p = Math.min(Math.max(p, n), Util.MAX_FRACTION_DIGITS);\r\n        return parseFloat(f.toFixed(p));\r\n    };\r\n    /*\r\n        【小数演算誤差修正】\r\n        ■ 0.01 + 0.05\t\t\t→ 0.060000000000000005\t\t→ 0.06\r\n        ■ 1.116 - 1.113\t\t→ 0.0030000000000001137\t→ 0.003\r\n        ■ 1.1116 - 1.1113\t\t→ 0.00029999999999996696\t→ 0.0003\r\n        ■ 755 * 2.3\t\t\t→ 1736.4999999999997\t\t→ 1736.5\r\n        ■ 1111212212 * 0.01\t→ 11112122.120000001\t\t→ 11112122.12\r\n        ■ 17.65 * 465000\t\t→ 8207249.999999999\t\t→ 8207250\r\n        ■ 17.65 * 0.00465\t\t→ 0.08207249999999999\t\t→ 0.0820725\r\n        ■ 0.01 * 0.7\t\t\t→ 0.006999999999999999\t\t→ 0.007\r\n        ■ 0.01 * 0.07\t\t\t→ 0.0007000000000000001\t→ 0.0007\r\n        ■ 0.0003 * 0.0007\t\t→ 2.0999999999999997e-7\t→ 2.1e-7(=0.00000021)\r\n        ■ 1400 / 0.7\t\t\t→ 2000.0000000000002\t\t→ 2000\r\n        ■ 1400 / 0.07\t\t\t→ 19999.999999999996\t\t→ 20000\r\n    */\r\n    Util.MAX_FRACTION_DIGITS = 20;\r\n    return Util;\r\n}());\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Util);\r\n\n\n//# sourceURL=webpack://calculator/./src/Util.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Calculator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Calculator */ \"./src/Calculator.ts\");\n\r\nwindow.onload = function () {\r\n    var mainDisplay = document.getElementById(\"txtMainDisplay\");\r\n    var memoryDisplay = document.getElementById(\"txtMemoryDisplay\");\r\n    var calc = new _Calculator__WEBPACK_IMPORTED_MODULE_0__.Calculator({\r\n        MainDisplay: mainDisplay,\r\n        MemoryDisplay: memoryDisplay,\r\n        fractionDigits: 8,\r\n    });\r\n    var _loop_1 = function (name_1) {\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        var element = document.getElementById(name_1);\r\n        element.addEventListener(\"click\", function () {\r\n            calc.inputKey(name_1, element.value);\r\n            return false;\r\n        });\r\n    };\r\n    /*\r\n     * 電卓ボタン名 → Calculator のメソッド名\r\n     */\r\n    /*\r\n     * 電卓ボタンの onclick と Calculator のメソッドを関連付け\r\n     */\r\n    for (var _i = 0, calcButtonToMethods_1 = _Calculator__WEBPACK_IMPORTED_MODULE_0__.calcButtonToMethods; _i < calcButtonToMethods_1.length; _i++) {\r\n        var name_1 = calcButtonToMethods_1[_i];\r\n        _loop_1(name_1);\r\n    }\r\n    /*\r\n     * キーコード → 電卓ボタン名\r\n     */\r\n    var keyCodeToCalcButton = {\r\n        8: \"btnBack\",\r\n        46: \"btnClearEnter\",\r\n        27: \"btnClear\",\r\n        13: \"btnEvaluation\",\r\n        120: \"btnNegate\", // [F9]\r\n    };\r\n    /*\r\n     * キーコード ([Ctrl] 修飾) → 電卓ボタン名\r\n     */\r\n    var keyCodeWithCtrlToCalcButton = {\r\n        76: \"btnMemoryClear\",\r\n        82: \"btnMemoryRead\",\r\n        77: \"btnMemoryStore\",\r\n        80: \"btnMemoryAdd\", // [P]\r\n    };\r\n    /*\r\n     * 押下キーをキーコードで取得するので、動作がデバイスに依存する。\r\n     * イベントの発生順は、keydown → keypress → keyup。\r\n     * keydown をキャンセルすると、keypress が発生しない。\r\n     */\r\n    document.addEventListener(\"keydown\", function (event) {\r\n        if (event.altKey) {\r\n            return true;\r\n        }\r\n        var code = event.keyCode;\r\n        var name = event.ctrlKey\r\n            ? keyCodeWithCtrlToCalcButton[code]\r\n            : keyCodeToCalcButton[code];\r\n        if (name != null) {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            var element = document.getElementById(name);\r\n            element.click();\r\n            return false;\r\n        }\r\n        return true;\r\n    });\r\n    /*\r\n     * 印字文字 → 電卓ボタン名\r\n     */\r\n    var printableCharToCalcButton = {\r\n        \"1\": \"btnNumber1\",\r\n        \"2\": \"btnNumber2\",\r\n        \"3\": \"btnNumber3\",\r\n        \"4\": \"btnNumber4\",\r\n        \"5\": \"btnNumber5\",\r\n        \"6\": \"btnNumber6\",\r\n        \"7\": \"btnNumber7\",\r\n        \"8\": \"btnNumber8\",\r\n        \"9\": \"btnNumber9\",\r\n        \"0\": \"btnNumber0\",\r\n        \".\": \"btnPoint\",\r\n        \"+\": \"btnAddition\",\r\n        \"-\": \"btnSubtraction\",\r\n        \"*\": \"btnMultiply\",\r\n        \"/\": \"btnDivision\",\r\n        \"=\": \"btnEvaluation\",\r\n        \"@\": \"btnSquareRoot\",\r\n        \"%\": \"btnPercentage\",\r\n        R: \"btnReciprocal\",\r\n    };\r\n    /*\r\n     * 押下キーを文字コードで取得できるので、動作がデバイスに依存しない。\r\n     * IE では、[Alt]/[Ctrl] 修飾時や非印字文字は、keypress が発生しない。\r\n     * 代わりに、keydown で処理する必要がある。\r\n     */\r\n    document.addEventListener(\"keypress\", function (event) {\r\n        if (event.altKey || event.ctrlKey) {\r\n            return true;\r\n        } // Firefox (修飾キー)\r\n        if (event.charCode === 0) {\r\n            return true;\r\n        } // Firefox (非印字文字)\r\n        var code = event.charCode || event.keyCode; // 文字コード\r\n        var ch = String.fromCharCode(code).toUpperCase();\r\n        var name = printableCharToCalcButton[ch];\r\n        if (name) {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            var element = document.getElementById(name);\r\n            element.click();\r\n            return false;\r\n        }\r\n        return true;\r\n    });\r\n};\r\n\n\n//# sourceURL=webpack://calculator/./src/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/main.ts");
/******/ 	
/******/ })()
;