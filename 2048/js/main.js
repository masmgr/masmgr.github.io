/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/game_manager.ts":
/*!*****************************!*\
  !*** ./src/game_manager.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Direction\": () => (/* binding */ Direction),\n/* harmony export */   \"VectorDirection\": () => (/* binding */ VectorDirection),\n/* harmony export */   \"GameManager\": () => (/* binding */ GameManager)\n/* harmony export */ });\n/* harmony import */ var _grid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./grid */ \"./src/grid.ts\");\n/* harmony import */ var _html_actuator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./html_actuator */ \"./src/html_actuator.ts\");\n/* harmony import */ var _keyboard_input_manager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keyboard_input_manager */ \"./src/keyboard_input_manager.ts\");\n/* harmony import */ var _local_storage_manager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./local_storage_manager */ \"./src/local_storage_manager.ts\");\n/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tile */ \"./src/tile.ts\");\n\r\n\r\n\r\n\r\n\r\nvar Direction = {\r\n    Up: 0,\r\n    Right: 1,\r\n    Down: 2,\r\n    Left: 3,\r\n};\r\nvar VectorDirection = {\r\n    Zero: 0,\r\n    Plus: 1,\r\n    Minus: -1,\r\n};\r\nvar GameManager = /** @class */ (function () {\r\n    function GameManager(size) {\r\n        this.size = size; // Size of the grid\r\n        this.inputManager = new _keyboard_input_manager__WEBPACK_IMPORTED_MODULE_2__.KeyboardInputManager();\r\n        this.storageManager = new _local_storage_manager__WEBPACK_IMPORTED_MODULE_3__.LocalStorageManager();\r\n        this.actuator = new _html_actuator__WEBPACK_IMPORTED_MODULE_1__.HTMLActuator();\r\n        this.startTiles = 2;\r\n        this.inputManager.on(\"move\", this.move.bind(this));\r\n        this.inputManager.on(\"restart\", this.restart.bind(this));\r\n        this.inputManager.on(\"keepPlaying\", this.keepPlay.bind(this));\r\n        this.grid = new _grid__WEBPACK_IMPORTED_MODULE_0__.Grid(this.size);\r\n        this.score = 0;\r\n        this.over = false;\r\n        this.won = false;\r\n        this.keepPlaying = false;\r\n        this.setup();\r\n    }\r\n    // Restart the game\r\n    GameManager.prototype.restart = function () {\r\n        this.storageManager.clearGameState();\r\n        this.actuator.continueGame(); // Clear the game won/lost message\r\n        this.setup();\r\n    };\r\n    // Keep playing after winning (allows going over 2048)\r\n    GameManager.prototype.keepPlay = function () {\r\n        this.keepPlaying = true;\r\n        this.actuator.continueGame(); // Clear the game won/lost message\r\n    };\r\n    // Return true if the game is lost, or has won and the user hasn't kept playing\r\n    GameManager.prototype.isGameTerminated = function () {\r\n        return this.over || (this.won && !this.keepPlaying);\r\n    };\r\n    // Set up the game\r\n    GameManager.prototype.setup = function () {\r\n        var previousState = this.storageManager.getGameState();\r\n        // Reload the game from a previous game if present\r\n        if (previousState) {\r\n            this.grid = new _grid__WEBPACK_IMPORTED_MODULE_0__.Grid(previousState.grid.size, previousState.grid.cells); // Reload grid\r\n            this.score = previousState.score;\r\n            this.over = previousState.over;\r\n            this.won = previousState.won;\r\n            this.keepPlaying = previousState.keepPlaying;\r\n        }\r\n        else {\r\n            this.grid = new _grid__WEBPACK_IMPORTED_MODULE_0__.Grid(this.size);\r\n            this.score = 0;\r\n            this.over = false;\r\n            this.won = false;\r\n            this.keepPlaying = false;\r\n            // Add the initial tiles\r\n            this.addStartTiles();\r\n        }\r\n        // Update the actuator\r\n        this.actuate();\r\n    };\r\n    // Set up the initial tiles to start the game with\r\n    GameManager.prototype.addStartTiles = function () {\r\n        for (var i = 0; i < this.startTiles; i++) {\r\n            this.addRandomTile();\r\n        }\r\n    };\r\n    // Adds a tile in a random position\r\n    GameManager.prototype.addRandomTile = function () {\r\n        if (this.grid.cellsAvailable()) {\r\n            var value = Math.random() < 0.9 ? 2 : 4;\r\n            var tile = new _tile__WEBPACK_IMPORTED_MODULE_4__.Tile(this.grid.randomAvailableCell(), value);\r\n            this.grid.insertTile(tile);\r\n        }\r\n    };\r\n    // Sends the updated grid to the actuator\r\n    GameManager.prototype.actuate = function () {\r\n        if (this.storageManager.getBestScore() < this.score) {\r\n            this.storageManager.setBestScore(this.score);\r\n        }\r\n        // Clear the state when the game is over (game over only, not win)\r\n        if (this.over) {\r\n            this.storageManager.clearGameState();\r\n        }\r\n        else {\r\n            this.storageManager.setGameState(this.serialize());\r\n        }\r\n        this.actuator.actuate(this.grid, {\r\n            score: this.score,\r\n            over: this.over,\r\n            won: this.won,\r\n            bestScore: this.storageManager.getBestScore(),\r\n            terminated: this.isGameTerminated(),\r\n        });\r\n    };\r\n    // Represent the current game as an object\r\n    GameManager.prototype.serialize = function () {\r\n        return {\r\n            grid: this.grid.serialize(),\r\n            score: this.score,\r\n            over: this.over,\r\n            won: this.won,\r\n            keepPlaying: this.keepPlaying,\r\n        };\r\n    };\r\n    // Save all tile positions and remove merger info\r\n    GameManager.prototype.prepareTiles = function () {\r\n        this.grid.eachCell(function (x, y, tile) {\r\n            if (tile) {\r\n                tile.mergedFrom = null;\r\n                tile.savePosition();\r\n            }\r\n        });\r\n    };\r\n    // Move a tile and its representation\r\n    GameManager.prototype.moveTile = function (tile, cell) {\r\n        this.grid.cells[tile.x][tile.y] = null;\r\n        this.grid.cells[cell.x][cell.y] = tile;\r\n        tile.updatePosition(cell);\r\n    };\r\n    // Move tiles on the grid in the specified direction\r\n    GameManager.prototype.move = function (direction) {\r\n        var _this = this;\r\n        if (direction == null)\r\n            return;\r\n        // 0: up, 1: right, 2: down, 3: left\r\n        if (this.isGameTerminated())\r\n            return; // Don't do anything if the game's over\r\n        var cell, tile;\r\n        var vector = this.getVector(direction);\r\n        var traversals = this.buildTraversals(vector);\r\n        var moved = false;\r\n        // Save the current tile positions and remove merger information\r\n        this.prepareTiles();\r\n        // Traverse the grid in the right direction and move tiles\r\n        traversals.x.forEach(function (x) {\r\n            traversals.y.forEach(function (y) {\r\n                var _a, _b;\r\n                cell = { x: x, y: y };\r\n                tile = _this.grid.cellContent(cell);\r\n                if (tile) {\r\n                    var positions = _this.findFarthestPosition(cell, vector);\r\n                    var next = _this.grid.cellContent(positions.next);\r\n                    // Only one merger per row traversal?\r\n                    if (next && next.value === tile.value && !next.mergedFrom) {\r\n                        var merged = new _tile__WEBPACK_IMPORTED_MODULE_4__.Tile(positions.next, ((_a = tile === null || tile === void 0 ? void 0 : tile.value) !== null && _a !== void 0 ? _a : 0) * 2);\r\n                        merged.mergedFrom = [tile, next];\r\n                        _this.grid.insertTile(merged);\r\n                        _this.grid.removeTile(tile);\r\n                        // Converge the two tiles' positions\r\n                        tile.updatePosition(positions.next);\r\n                        // Update the score\r\n                        _this.score += (_b = merged.value) !== null && _b !== void 0 ? _b : 0;\r\n                        // The mighty 2048 tile\r\n                        if (merged.value === 2048)\r\n                            _this.won = true;\r\n                    }\r\n                    else {\r\n                        _this.moveTile(tile, positions.farthest);\r\n                    }\r\n                    if (!_this.positionsEqual(cell, tile)) {\r\n                        moved = true; // The tile moved from its original cell!\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        if (moved) {\r\n            this.addRandomTile();\r\n            if (!this.movesAvailable()) {\r\n                this.over = true; // Game over!\r\n            }\r\n            this.actuate();\r\n        }\r\n    };\r\n    // Get the vector representing the chosen direction\r\n    GameManager.prototype.getVector = function (direction) {\r\n        // Vectors representing tile movement\r\n        var map = {\r\n            0: { x: VectorDirection.Zero, y: VectorDirection.Minus },\r\n            1: { x: VectorDirection.Plus, y: VectorDirection.Zero },\r\n            2: { x: VectorDirection.Zero, y: VectorDirection.Plus },\r\n            3: { x: VectorDirection.Minus, y: VectorDirection.Zero }, // Left\r\n        };\r\n        return map[direction];\r\n    };\r\n    // Build a list of positions to traverse in the right order\r\n    GameManager.prototype.buildTraversals = function (vector) {\r\n        var traversals = {\r\n            x: [],\r\n            y: [],\r\n        };\r\n        for (var pos = 0; pos < this.size; pos++) {\r\n            traversals.x.push(pos);\r\n            traversals.y.push(pos);\r\n        }\r\n        // Always traverse from the farthest cell in the chosen direction\r\n        if (vector.x === 1)\r\n            traversals.x = traversals.x.reverse();\r\n        if (vector.y === 1)\r\n            traversals.y = traversals.y.reverse();\r\n        return traversals;\r\n    };\r\n    GameManager.prototype.findFarthestPosition = function (cell, vector) {\r\n        var previous;\r\n        // Progress towards the vector direction until an obstacle is found\r\n        do {\r\n            previous = cell;\r\n            cell = { x: previous.x + vector.x, y: previous.y + vector.y };\r\n        } while (this.grid.withinBounds(cell) && this.grid.cellAvailable(cell));\r\n        return {\r\n            farthest: previous,\r\n            next: cell, // Used to check if a merge is required\r\n        };\r\n    };\r\n    GameManager.prototype.movesAvailable = function () {\r\n        return this.grid.cellsAvailable() || this.tileMatchesAvailable();\r\n    };\r\n    // Check for available matches between tiles (more expensive check)\r\n    GameManager.prototype.tileMatchesAvailable = function () {\r\n        var tile;\r\n        for (var x = 0; x < this.size; x++) {\r\n            for (var y = 0; y < this.size; y++) {\r\n                tile = this.grid.cellContent({ x: x, y: y });\r\n                if (tile) {\r\n                    for (var _i = 0, _a = [\r\n                        Direction.Up,\r\n                        Direction.Right,\r\n                        Direction.Down,\r\n                        Direction.Left,\r\n                    ]; _i < _a.length; _i++) {\r\n                        var direction = _a[_i];\r\n                        var vector = this.getVector(direction);\r\n                        var cell = { x: x + vector.x, y: y + vector.y };\r\n                        var other = this.grid.cellContent(cell);\r\n                        if (other && other.value === tile.value) {\r\n                            return true; // These two tiles can be merged\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    GameManager.prototype.positionsEqual = function (first, second) {\r\n        return first.x === second.x && first.y === second.y;\r\n    };\r\n    return GameManager;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://2048/./src/game_manager.ts?");

/***/ }),

/***/ "./src/grid.ts":
/*!*********************!*\
  !*** ./src/grid.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Grid\": () => (/* binding */ Grid)\n/* harmony export */ });\n/* harmony import */ var _tile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tile */ \"./src/tile.ts\");\n\r\nvar Grid = /** @class */ (function () {\r\n    function Grid(size, previousState) {\r\n        this.size = size;\r\n        this.cells = previousState\r\n            ? this.fromState(previousState)\r\n            : this.empty();\r\n    }\r\n    // Build a grid of the specified size\r\n    Grid.prototype.empty = function () {\r\n        var cells = [];\r\n        for (var x = 0; x < this.size; x++) {\r\n            var row = (cells[x] = []);\r\n            for (var y = 0; y < this.size; y++) {\r\n                row.push(null);\r\n            }\r\n        }\r\n        return cells;\r\n    };\r\n    Grid.prototype.fromState = function (state) {\r\n        var cells = [];\r\n        for (var x = 0; x < this.size; x++) {\r\n            var row = (cells[x] = []);\r\n            for (var y = 0; y < this.size; y++) {\r\n                var tile = state[x][y];\r\n                if (tile) {\r\n                    var position = { x: tile.position.x, y: tile.position.y };\r\n                    row.push(new _tile__WEBPACK_IMPORTED_MODULE_0__.Tile(position, tile.value));\r\n                }\r\n                else {\r\n                    row.push(null);\r\n                }\r\n            }\r\n        }\r\n        return cells;\r\n    };\r\n    // Find the first available random position\r\n    Grid.prototype.randomAvailableCell = function () {\r\n        var cells = this.availableCells();\r\n        return cells[Math.floor(Math.random() * cells.length)];\r\n    };\r\n    Grid.prototype.availableCells = function () {\r\n        var cells = [];\r\n        this.eachCell(function (x, y, tile) {\r\n            if (!tile) {\r\n                cells.push({ x: x, y: y });\r\n            }\r\n        });\r\n        return cells;\r\n    };\r\n    // Call callback for every cell\r\n    Grid.prototype.eachCell = function (callback) {\r\n        for (var x = 0; x < this.size; x++) {\r\n            for (var y = 0; y < this.size; y++) {\r\n                callback(x, y, this.cells[x][y]);\r\n            }\r\n        }\r\n    };\r\n    // Check if there are any cells available\r\n    Grid.prototype.cellsAvailable = function () {\r\n        return !!this.availableCells().length;\r\n    };\r\n    // Check if the specified cell is taken\r\n    Grid.prototype.cellAvailable = function (cell) {\r\n        return !this.cellOccupied(cell);\r\n    };\r\n    Grid.prototype.cellOccupied = function (cell) {\r\n        return !!this.cellContent(cell);\r\n    };\r\n    Grid.prototype.cellContent = function (cell) {\r\n        if (this.withinBounds(cell)) {\r\n            return this.cells[cell.x][cell.y];\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    // Inserts a tile at its position\r\n    Grid.prototype.insertTile = function (tile) {\r\n        this.cells[tile.x][tile.y] = tile;\r\n    };\r\n    Grid.prototype.removeTile = function (tile) {\r\n        this.cells[tile.x][tile.y] = null;\r\n    };\r\n    Grid.prototype.withinBounds = function (position) {\r\n        return (position.x >= 0 &&\r\n            position.x < this.size &&\r\n            position.y >= 0 &&\r\n            position.y < this.size);\r\n    };\r\n    Grid.prototype.serialize = function () {\r\n        var _a, _b;\r\n        var cellState = [];\r\n        for (var x = 0; x < this.size; x++) {\r\n            var row = (cellState[x] = []);\r\n            for (var y = 0; y < this.size; y++) {\r\n                row.push((_b = (_a = this === null || this === void 0 ? void 0 : this.cells[x][y]) === null || _a === void 0 ? void 0 : _a.serialize()) !== null && _b !== void 0 ? _b : null);\r\n            }\r\n        }\r\n        return {\r\n            size: this.size,\r\n            cells: cellState,\r\n        };\r\n    };\r\n    return Grid;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://2048/./src/grid.ts?");

/***/ }),

/***/ "./src/html_actuator.ts":
/*!******************************!*\
  !*** ./src/html_actuator.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"HTMLActuator\": () => (/* binding */ HTMLActuator)\n/* harmony export */ });\nvar HTMLActuator = /** @class */ (function () {\r\n    function HTMLActuator() {\r\n        this.tileContainer =\r\n            document.querySelector(\".tile-container\");\r\n        this.scoreContainer =\r\n            document.querySelector(\".score-container\");\r\n        this.bestContainer =\r\n            document.querySelector(\".best-container\");\r\n        this.messageContainer =\r\n            document.querySelector(\".game-message\");\r\n        this.score = 0;\r\n    }\r\n    HTMLActuator.prototype.actuate = function (grid, metadata) {\r\n        var _this = this;\r\n        window.requestAnimationFrame(function () {\r\n            _this.clearContainer(_this.tileContainer);\r\n            grid.cells.forEach(function (column) {\r\n                column.forEach(function (cell) {\r\n                    if (cell) {\r\n                        _this.addTile(cell);\r\n                    }\r\n                });\r\n            });\r\n            _this.updateScore(metadata.score);\r\n            _this.updateBestScore(metadata.bestScore);\r\n            if (metadata.terminated) {\r\n                if (metadata.over) {\r\n                    _this.message(false); // You lose\r\n                }\r\n                else if (metadata.won) {\r\n                    _this.message(true); // You win!\r\n                }\r\n            }\r\n        });\r\n    };\r\n    // Continues the game (both restart and keep playing)\r\n    HTMLActuator.prototype.continueGame = function () {\r\n        this.clearMessage();\r\n    };\r\n    HTMLActuator.prototype.clearContainer = function (container) {\r\n        while (container.firstChild) {\r\n            container.removeChild(container.firstChild);\r\n        }\r\n    };\r\n    HTMLActuator.prototype.addTile = function (tile) {\r\n        var _this = this;\r\n        var _a, _b, _c, _d;\r\n        var wrapper = document.createElement(\"div\");\r\n        var inner = document.createElement(\"div\");\r\n        var position = tile.previousPosition || { x: tile.x, y: tile.y };\r\n        var positionClass = this.positionClass(position);\r\n        // We can't use classlist because it somehow glitches when replacing classes\r\n        var classes = [\"tile\", \"tile-\" + tile.value, positionClass];\r\n        if (((_a = tile.value) !== null && _a !== void 0 ? _a : 0) > 2048) {\r\n            classes.push(\"tile-super\");\r\n        }\r\n        this.applyClasses(wrapper, classes);\r\n        inner.classList.add(\"tile-inner\");\r\n        inner.textContent = (_c = (_b = tile.value) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : null;\r\n        if (tile.previousPosition) {\r\n            // Make sure that the tile gets rendered in the previous position first\r\n            window.requestAnimationFrame(function () {\r\n                classes[2] = _this.positionClass({ x: tile.x, y: tile.y });\r\n                _this.applyClasses(wrapper, classes); // Update the position\r\n            });\r\n        }\r\n        else if (tile.mergedFrom) {\r\n            classes.push(\"tile-merged\");\r\n            this.applyClasses(wrapper, classes);\r\n            // Render the tiles that merged\r\n            tile.mergedFrom.forEach(function (merged) {\r\n                _this.addTile(merged);\r\n            });\r\n        }\r\n        else {\r\n            classes.push(\"tile-new\");\r\n            this.applyClasses(wrapper, classes);\r\n        }\r\n        // Add the inner part of the tile to the wrapper\r\n        wrapper.appendChild(inner);\r\n        // Put the tile on the board\r\n        (_d = this.tileContainer) === null || _d === void 0 ? void 0 : _d.appendChild(wrapper);\r\n    };\r\n    HTMLActuator.prototype.applyClasses = function (element, classes) {\r\n        element.setAttribute(\"class\", classes.join(\" \"));\r\n    };\r\n    HTMLActuator.prototype.normalizePosition = function (position) {\r\n        return { x: position.x + 1, y: position.y + 1 };\r\n    };\r\n    HTMLActuator.prototype.positionClass = function (position) {\r\n        position = this.normalizePosition(position);\r\n        return \"tile-position-\" + position.x + \"-\" + position.y;\r\n    };\r\n    HTMLActuator.prototype.updateScore = function (score) {\r\n        var _a;\r\n        this.clearContainer(this.scoreContainer);\r\n        var difference = score - this.score;\r\n        this.score = score;\r\n        if (this.scoreContainer == null) {\r\n            return;\r\n        }\r\n        this.scoreContainer.textContent = this.score.toString();\r\n        if (difference > 0) {\r\n            var addition = document.createElement(\"div\");\r\n            addition.classList.add(\"score-addition\");\r\n            addition.textContent = \"+\" + difference;\r\n            (_a = this.scoreContainer) === null || _a === void 0 ? void 0 : _a.appendChild(addition);\r\n        }\r\n    };\r\n    HTMLActuator.prototype.updateBestScore = function (bestScore) {\r\n        if (this.bestContainer == null) {\r\n            return;\r\n        }\r\n        this.bestContainer.textContent = bestScore.toString();\r\n    };\r\n    HTMLActuator.prototype.message = function (won) {\r\n        var _a;\r\n        var type = won ? \"game-won\" : \"game-over\";\r\n        var message = won ? \"You win!\" : \"Game over!\";\r\n        (_a = this.messageContainer) === null || _a === void 0 ? void 0 : _a.classList.add(type);\r\n        if (this.messageContainer == null) {\r\n            return;\r\n        }\r\n        this.messageContainer.getElementsByTagName(\"p\")[0].textContent =\r\n            message;\r\n    };\r\n    HTMLActuator.prototype.clearMessage = function () {\r\n        var _a, _b;\r\n        // IE only takes one value to remove at a time.\r\n        (_a = this.messageContainer) === null || _a === void 0 ? void 0 : _a.classList.remove(\"game-won\");\r\n        (_b = this.messageContainer) === null || _b === void 0 ? void 0 : _b.classList.remove(\"game-over\");\r\n    };\r\n    return HTMLActuator;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://2048/./src/html_actuator.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game_manager */ \"./src/game_manager.ts\");\n// Wait till the browser is ready to render the game (avoids glitches)\r\n\r\nwindow.requestAnimationFrame(function () {\r\n    new _game_manager__WEBPACK_IMPORTED_MODULE_0__.GameManager(4);\r\n});\r\n\n\n//# sourceURL=webpack://2048/./src/index.ts?");

/***/ }),

/***/ "./src/keyboard_input_manager.ts":
/*!***************************************!*\
  !*** ./src/keyboard_input_manager.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"KeyboardInputManager\": () => (/* binding */ KeyboardInputManager)\n/* harmony export */ });\n/* harmony import */ var _game_manager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game_manager */ \"./src/game_manager.ts\");\n\r\nvar KeyboardInputManager = /** @class */ (function () {\r\n    function KeyboardInputManager() {\r\n        this.events = {};\r\n        this.eventTouchstart = \"touchstart\";\r\n        this.eventTouchmove = \"touchmove\";\r\n        this.eventTouchend = \"touchend\";\r\n        this.listen();\r\n    }\r\n    KeyboardInputManager.prototype.on = function (event, callback) {\r\n        if (!this.events[event]) {\r\n            this.events[event] = [];\r\n        }\r\n        this.events[event].push(callback);\r\n    };\r\n    KeyboardInputManager.prototype.emit = function (event, data) {\r\n        var callbacks = this.events[event];\r\n        if (callbacks) {\r\n            callbacks.forEach(function (callback) {\r\n                callback(data);\r\n            });\r\n        }\r\n    };\r\n    KeyboardInputManager.prototype.listen = function () {\r\n        var _this = this;\r\n        var map = {\r\n            38: _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Up,\r\n            39: _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Right,\r\n            40: _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Down,\r\n            37: _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Left,\r\n            75: _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Up,\r\n            76: _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Right,\r\n            74: _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Down,\r\n            72: _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Left,\r\n            87: _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Up,\r\n            68: _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Right,\r\n            83: _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Down,\r\n            65: _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Left, // A\r\n        };\r\n        // Respond to direction keys\r\n        document.addEventListener(\"keydown\", function (event) {\r\n            var modifiers = event.altKey ||\r\n                event.ctrlKey ||\r\n                event.metaKey ||\r\n                event.shiftKey;\r\n            var mapped = map[event.which];\r\n            if (!modifiers) {\r\n                if (mapped !== undefined) {\r\n                    event.preventDefault();\r\n                    _this.emit(\"move\", mapped);\r\n                }\r\n            }\r\n            // R key restarts the game\r\n            if (!modifiers && event.which === 82) {\r\n                _this.restart.call(self, event);\r\n            }\r\n        });\r\n        // Respond to button presses\r\n        this.bindButtonPress(\".retry-button\", this.restart);\r\n        this.bindButtonPress(\".restart-button\", this.restart);\r\n        this.bindButtonPress(\".keep-playing-button\", this.keepPlaying);\r\n        // Respond to swipe events\r\n        var touchStartClientX, touchStartClientY;\r\n        var gameContainer = document.getElementsByClassName(\"game-container\")[0];\r\n        gameContainer.addEventListener(this.eventTouchstart, (function (event) {\r\n            if (event.touches.length > 1 || event.targetTouches.length > 1) {\r\n                return; // Ignore if touching with more than 1 finger\r\n            }\r\n            touchStartClientX = event.touches[0].clientX;\r\n            touchStartClientY = event.touches[0].clientY;\r\n            event.preventDefault();\r\n        }));\r\n        gameContainer.addEventListener(this.eventTouchmove, (function (event) {\r\n            event.preventDefault();\r\n        }));\r\n        gameContainer.addEventListener(this.eventTouchend, (function (event) {\r\n            // Remove code msPointerEnabled\r\n            if (event.touches.length > 0 || event.targetTouches.length > 0) {\r\n                return; // Ignore if still touching with one or more fingers\r\n            }\r\n            var touchEndClientX = event.changedTouches[0].clientX;\r\n            var touchEndClientY = event.changedTouches[0].clientY;\r\n            var dx = touchEndClientX - touchStartClientX;\r\n            var absDx = Math.abs(dx);\r\n            var dy = touchEndClientY - touchStartClientY;\r\n            var absDy = Math.abs(dy);\r\n            if (Math.max(absDx, absDy) > 10) {\r\n                var direction = void 0;\r\n                if (absDx > absDy) {\r\n                    if (dx > 0) {\r\n                        direction = _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Right;\r\n                    }\r\n                    else {\r\n                        direction = _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Left;\r\n                    }\r\n                }\r\n                else {\r\n                    if (dy > 0) {\r\n                        direction = _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Down;\r\n                    }\r\n                    else {\r\n                        direction = _game_manager__WEBPACK_IMPORTED_MODULE_0__.Direction.Up;\r\n                    }\r\n                }\r\n                // (right : left) : (down : up)\r\n                _this.emit(\"move\", direction);\r\n            }\r\n        }));\r\n    };\r\n    KeyboardInputManager.prototype.restart = function (event) {\r\n        event.preventDefault();\r\n        this.emit(\"restart\");\r\n    };\r\n    KeyboardInputManager.prototype.keepPlaying = function (event) {\r\n        event.preventDefault();\r\n        this.emit(\"keepPlaying\");\r\n    };\r\n    KeyboardInputManager.prototype.bindButtonPress = function (selector, fn) {\r\n        var button = document.querySelector(selector);\r\n        button === null || button === void 0 ? void 0 : button.addEventListener(\"click\", fn.bind(this));\r\n        button === null || button === void 0 ? void 0 : button.addEventListener(this.eventTouchend, fn.bind(this));\r\n    };\r\n    return KeyboardInputManager;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://2048/./src/keyboard_input_manager.ts?");

/***/ }),

/***/ "./src/local_storage_manager.ts":
/*!**************************************!*\
  !*** ./src/local_storage_manager.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"LocalStorageManager\": () => (/* binding */ LocalStorageManager)\n/* harmony export */ });\nvar FakeStorage = /** @class */ (function () {\r\n    function FakeStorage() {\r\n        this._data = {};\r\n        this.length = 0;\r\n    }\r\n    FakeStorage.prototype.setItem = function (id, val) {\r\n        return (this._data[id] = String(val));\r\n    };\r\n    FakeStorage.prototype.getItem = function (id) {\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        return this._data.hasOwnProperty(id) ? this._data[id] : null;\r\n    };\r\n    FakeStorage.prototype.removeItem = function (id) {\r\n        return delete this._data[id];\r\n    };\r\n    FakeStorage.prototype.clear = function () {\r\n        return (this._data = {});\r\n    };\r\n    FakeStorage.prototype.key = function (index) {\r\n        return null;\r\n    };\r\n    return FakeStorage;\r\n}());\r\nvar LocalStorageManager = /** @class */ (function () {\r\n    function LocalStorageManager() {\r\n        this.bestScoreKey = \"bestScore\";\r\n        this.gameStateKey = \"gameState\";\r\n        var supported = this.localStorageSupported();\r\n        this.storage = supported ? window.localStorage : window.fakeStorage;\r\n    }\r\n    LocalStorageManager.prototype.localStorageSupported = function () {\r\n        var testKey = \"test\";\r\n        try {\r\n            var storage = window.localStorage;\r\n            storage.setItem(testKey, \"1\");\r\n            storage.removeItem(testKey);\r\n            return true;\r\n        }\r\n        catch (error) {\r\n            return false;\r\n        }\r\n    };\r\n    // Best score getters/setters\r\n    LocalStorageManager.prototype.getBestScore = function () {\r\n        var _a;\r\n        return parseInt((_a = this.storage.getItem(this.bestScoreKey)) !== null && _a !== void 0 ? _a : \"0\", 10);\r\n    };\r\n    LocalStorageManager.prototype.setBestScore = function (score) {\r\n        this.storage.setItem(this.bestScoreKey, score.toString());\r\n    };\r\n    // Game state getters/setters and clearing\r\n    LocalStorageManager.prototype.getGameState = function () {\r\n        var stateJSON = this.storage.getItem(this.gameStateKey);\r\n        return stateJSON ? JSON.parse(stateJSON) : null;\r\n    };\r\n    LocalStorageManager.prototype.setGameState = function (gameState) {\r\n        this.storage.setItem(this.gameStateKey, JSON.stringify(gameState));\r\n    };\r\n    LocalStorageManager.prototype.clearGameState = function () {\r\n        this.storage.removeItem(this.gameStateKey);\r\n    };\r\n    return LocalStorageManager;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://2048/./src/local_storage_manager.ts?");

/***/ }),

/***/ "./src/tile.ts":
/*!*********************!*\
  !*** ./src/tile.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Tile\": () => (/* binding */ Tile)\n/* harmony export */ });\nvar Tile = /** @class */ (function () {\r\n    function Tile(position, value) {\r\n        this.x = position.x;\r\n        this.y = position.y;\r\n        this.value = value !== null && value !== void 0 ? value : 2;\r\n        this.previousPosition = null;\r\n        this.mergedFrom = null; // Tracks tiles that merged together\r\n    }\r\n    Tile.prototype.savePosition = function () {\r\n        this.previousPosition = { x: this.x, y: this.y };\r\n    };\r\n    Tile.prototype.updatePosition = function (position) {\r\n        this.x = position.x;\r\n        this.y = position.y;\r\n    };\r\n    Tile.prototype.serialize = function () {\r\n        return {\r\n            position: {\r\n                x: this.x,\r\n                y: this.y,\r\n            },\r\n            value: this.value,\r\n        };\r\n    };\r\n    return Tile;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://2048/./src/tile.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;